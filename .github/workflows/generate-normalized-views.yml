
name: Database View Generation

on: [push, pull_request]

jobs:
  generate-views:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install psycopg2-binary

    - name: Run Network Diagnostics
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
      run: |
        python -c "
import os
import socket
import ssl

def diagnose_network():
    host = 'db.ssexobxvtuxwnblwplzh.supabase.co'
    port = 5432

    print(f'Diagnosing connection to {host}:{port}')

    try:
        # DNS Resolution
        ip_addresses = socket.getaddrinfo(host, port, socket.AF_UNSPEC, socket.SOCK_STREAM)
        print(f'✅ DNS Resolution: Found {len(ip_addresses)} IP addresses')

        # TCP Connection
        for family, socktype, proto, canonname, sockaddr in ip_addresses:
            try:
                with socket.create_connection((sockaddr[0], port), timeout=5) as sock:
                    print(f'✅ TCP Connection successful to {sockaddr[0]}')
            except Exception as e:
                print(f'❌ TCP Connection to {sockaddr[0]} failed: {e}')

        # SSL Handshake
        context = ssl.create_default_context()
        with socket.create_connection((host, port), timeout=5) as sock:
            with context.wrap_socket(sock, server_hostname=host) as secure_sock:
                print('✅ SSL Handshake successful')

    except Exception as e:
        print(f'❌ Network diagnosis failed: {e}')

diagnose_network()
"

    - name: Generate Normalized Views
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
      run: python generate_normalized_views.py
